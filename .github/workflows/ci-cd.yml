name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/trading-app-frontend
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # JOB 1: BUILD & TEST
  # ============================================================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure package-lock.json exists
        run: |
          if [ ! -f ./package-lock.json ]; then
            echo "Copying frontend/package-lock.json to root..."
            cp ./frontend/package-lock.json ./package-lock.json
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run linter
        run: npm run lint
        working-directory: ./frontend
        continue-on-error: true

      - name: Type check
        run: npm run type-check
        working-directory: ./frontend

      - name: Run tests
        run: npm run test:run
        working-directory: ./frontend

      - name: Build application
        run: npm run build
        working-directory: ./frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # ============================================================================
  # JOB 2: DOCKER BUILD & PUSH
  # ============================================================================
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  # ============================================================================
  # JOB 3: SCAN IMAGE (Security)
  # ============================================================================
  scan-image:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # JOB 4: DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, scan-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    continue-on-error: true
    
    environment:
      name: production
      url: http://localhost:3001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Add host to known_hosts
        run: |
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to production via SSH
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22 }}
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:latest
        run: |
          ssh -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -p ${{ secrets.DEPLOY_PORT || 22 }} \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          # Pull latest image
          echo "üì• Pulling latest image..."
          docker pull ${{ env.IMAGE_TAG }} || exit 1
          
          # Stop old container
          echo "üõë Stopping old container..."
          docker stop trading-app-production 2>/dev/null || true
          docker rm trading-app-production 2>/dev/null || true
          
          # Run new container
          echo "üöÄ Starting new container..."
          docker run -d \
            --name trading-app-production \
            --restart unless-stopped \
            -p 3001:80 \
            -e NODE_ENV=production \
            ${{ env.IMAGE_TAG }}
          
          # Wait for health check
          echo "‚è≥ Waiting for container to be healthy..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3001/ > /dev/null 2>&1; then
              echo "‚úÖ Container is healthy!"
              exit 0
            fi
            echo -n "."
            sleep 1
          done
          
          echo "‚ùå Container failed health check"
          exit 1
          
        EOF

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          
          for i in {1..10}; do
            if curl -s -f http://localhost:3001/ > /dev/null 2>&1; then
              echo "‚úÖ Endpoint responding on :3001"
              exit 0
            fi
            echo -n "."
            sleep 2
          done
          
          echo "‚ùå Smoke tests failed"
          exit 1

      - name: Notify Slack - Success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ Production deployment successful! App: http://localhost:3001"}' \
            ${{ secrets.SLACK_WEBHOOK_URL || 'https://hooks.slack.com/services/dummy/webhook' }}

      - name: Notify Slack - Failure
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"text":"‚ùå Production deployment FAILED!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL || 'https://hooks.slack.com/services/dummy/webhook' }}

  # ============================================================================
  # JOB 5: DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    continue-on-error: true
    
    environment:
      name: staging
      url: http://localhost:3002

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Add host to known_hosts
        run: |
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to staging via SSH
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22 }}
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:latest
        run: |
          ssh -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -p ${{ secrets.DEPLOY_PORT || 22 }} \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          # Pull latest image
          echo "üì• Pulling latest image..."
          docker pull ${{ env.IMAGE_TAG }} || exit 1
          
          # Stop old container
          echo "üõë Stopping old container..."
          docker stop trading-app-staging 2>/dev/null || true
          docker rm trading-app-staging 2>/dev/null || true
          
          # Run new container
          echo "üöÄ Starting new container..."
          docker run -d \
            --name trading-app-staging \
            --restart unless-stopped \
            -p 3002:80 \
            -e NODE_ENV=staging \
            ${{ env.IMAGE_TAG }}
          
          # Wait for health check
          echo "‚è≥ Waiting for container to be healthy..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3002/ > /dev/null 2>&1; then
              echo "‚úÖ Container is healthy!"
              exit 0
            fi
            echo -n "."
            sleep 1
          done
          
          echo "‚ùå Container failed health check"
          exit 1
          
        EOF

      - name: Verify staging deployment
        run: |
          echo "üß™ Verifying staging deployment..."
          
          for i in {1..10}; do
            if curl -s -f http://localhost:3002/ > /dev/null 2>&1; then
              echo "‚úÖ Staging endpoint responding on :3002"
              exit 0
            fi
            echo -n "."
            sleep 2
          done
          
          echo "‚ùå Verification failed"
          exit 1

      - name: Notify Slack - Success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ Staging deployment successful! App: http://localhost:3002"}' \
            ${{ secrets.SLACK_WEBHOOK_URL || 'https://hooks.slack.com/services/dummy/webhook' }}

# ============================================================================
# SECRETS REQUIRED IN GitHub Actions
# ============================================================================
# 
# Required Secrets:
# - DOCKER_USERNAME           Docker Hub username
# - DOCKER_PASSWORD           Docker Hub access token (or personal token)
# - DEPLOY_HOST               Production/Staging server hostname (localhost for dev)
# - DEPLOY_USER               SSH user for deployment (deploy)
# - DEPLOY_KEY                SSH private key (Base64 encoded)
# - DEPLOY_PORT               SSH port (default: 22)
# - SLACK_WEBHOOK_URL         Slack webhook for notifications (optional)
#
# How to setup secrets:
# 1. Go to: https://github.com/Gladiston-Porto/Trading-APP/settings/secrets/actions
# 2. Click "New repository secret"
# 3. Add each secret above
#
# For local development/testing:
# - DEPLOY_HOST: localhost
# - DEPLOY_USER: deploy (or your local user)
# - DEPLOY_KEY: base64-encoded private SSH key
# - DEPLOY_PORT: 22
#
# ============================================================================
