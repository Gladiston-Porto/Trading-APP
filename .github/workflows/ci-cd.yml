name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/trading-app-frontend
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # JOB 1: BUILD & TEST
  # ============================================================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure package-lock.json exists
        run: |
          if [ ! -f ./package-lock.json ]; then
            echo "Copying frontend/package-lock.json to root..."
            cp ./frontend/package-lock.json ./package-lock.json
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run linter
        run: npm run lint
        working-directory: ./frontend
        continue-on-error: true

      - name: Type check
        run: npm run type-check
        working-directory: ./frontend

      - name: Run tests
        run: npm run test:run
        working-directory: ./frontend

      - name: Build application
        run: npm run build
        working-directory: ./frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # ============================================================================
  # JOB 2: DOCKER BUILD & PUSH
  # ============================================================================
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  # ============================================================================
  # JOB 3: SCAN IMAGE (Security)
  # ============================================================================
  scan-image:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # JOB 4: DEPLOY TO PRODUCTION (Conditional)
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, scan-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://trading-app.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ env.DEPLOY_HOST }}" >> ~/.ssh/known_hosts
          
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
            cd /app/frontend
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_TOKEN"
            docker-compose pull
            docker-compose up -d
            docker-compose exec -T frontend curl -f http://localhost/health || exit 1
          EOF

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          curl -f https://trading-app.example.com/health || exit 1
          curl -f https://trading-app.example.com/ || exit 1
          echo "✅ Smoke tests passed"

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: ${{ job.status }}
          text: '✅ Production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          text: '❌ Production deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author

  # ============================================================================
  # JOB 5: DEPLOY TO STAGING (Optional)
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging-trading-app.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          DEPLOY_HOST: ${{ secrets.STAGING_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ env.DEPLOY_HOST }}" >> ~/.ssh/known_hosts
          
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
            cd /app/frontend
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_TOKEN"
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
          EOF

# ============================================================================
# SECRETS REQUIRED IN GitHub Actions
# ============================================================================
# 
# Required Secrets:
# - DOCKER_USERNAME       Docker Hub username
# - DOCKER_TOKEN          Docker Hub access token
# - DEPLOY_HOST           Production server hostname/IP
# - DEPLOY_USER           Production server SSH user
# - DEPLOY_KEY            Production server SSH private key
# - SLACK_WEBHOOK         Slack webhook for notifications (optional)
# - STAGING_DEPLOY_HOST   Staging server hostname (optional)
# - STAGING_DEPLOY_USER   Staging server SSH user (optional)
# - STAGING_DEPLOY_KEY    Staging server SSH key (optional)
#
# How to setup secrets:
# 1. Go to GitHub repo Settings
# 2. Click Secrets and variables → Actions
# 3. Click New repository secret
# 4. Add each secret above
#
# ============================================================================
