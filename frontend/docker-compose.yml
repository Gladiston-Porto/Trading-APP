version: '3.9'

services:
  # Frontend App - React + Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading-app-frontend
    image: trading-app-frontend:latest
    ports:
      # Map port 3000 (host) to 80 (container)
      # Modify to your desired host port
      - "3000:80"
    environment:
      # Frontend environment variables
      NODE_ENV: production
      
      # API configuration
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3333}
      VITE_API_TIMEOUT: ${VITE_API_TIMEOUT:-30000}
      
      # Feature flags
      VITE_ENABLE_CHARTS: "true"
      VITE_ENABLE_THEME: "true"
      VITE_ENABLE_NOTIFICATIONS: "true"
      
      # Analytics (optional)
      VITE_ANALYTICS_ENABLED: ${VITE_ANALYTICS_ENABLED:-false}
      
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only_root_filesystem: false
    tmpfs:
      - /var/run
      - /var/cache/nginx
      - /var/log/nginx
    
    # Networks
    networks:
      - trading-app-network

# ============================================================================
# BACKEND SERVICE (Optional - uncomment if backend is containerized)
# ============================================================================

  # backend:
  #   build:
  #     context: ../backend
  #     dockerfile: Dockerfile
  #   container_name: trading-app-backend
  #   image: trading-app-backend:latest
  #   ports:
  #     - "3333:3333"
  #   environment:
  #     NODE_ENV: production
  #     PORT: 3333
  #     DATABASE_URL: ${DATABASE_URL}
  #     JWT_SECRET: ${JWT_SECRET}
  #     REDIS_URL: ${REDIS_URL:-redis://redis:6379}
  #   depends_on:
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
  #     interval: 30s
  #     timeout: 3s
  #     retries: 3
  #     start_period: 10s
  #   restart: unless-stopped
  #   networks:
  #     - trading-app-network

# ============================================================================
# REDIS CACHE (Optional)
# ============================================================================

  # redis:
  #   image: redis:7-alpine
  #   container_name: trading-app-redis
  #   ports:
  #     - "6379:6379"
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 3s
  #     retries: 3
  #   restart: unless-stopped
  #   networks:
  #     - trading-app-network

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  # redis_data:
  #   driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  trading-app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# USAGE
# ============================================================================
# 
# Build and start:
#   docker-compose up -d
#
# Start existing containers:
#   docker-compose start
#
# Stop containers:
#   docker-compose stop
#
# Remove containers and volumes:
#   docker-compose down -v
#
# View logs:
#   docker-compose logs -f frontend
#
# Rebuild image:
#   docker-compose build --no-cache
#
# Run specific service:
#   docker-compose up -d frontend
#
# Scale a service:
#   docker-compose up -d --scale frontend=2
#
# Execute command in container:
#   docker-compose exec frontend sh
#
